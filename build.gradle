plugins {
    id 'java'
    id 'io.franzbecker.gradle-lombok' version '4.0.0'
}

group = 'dev.vankka'
archivesBaseName = 'SimpleAST'
version = '2.2.8-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.12'
}

javadoc {
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.author()
    options.encoding = 'UTF-8'
    options.addBooleanOption('html5', true)
    options.addBooleanOption('Xdoclint:none', true)
    failOnError = false
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

if (System.getenv('SONATYPE_KEY') == null && !project.hasProperty("signing.keyId")) {
    // Don't even bother with signing/publishing if neither of these are set
    return
}

task publishProject {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    dependsOn tasks.build

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java

                pom {
                    name = project.name
                    packaging = 'jar'
                    description = 'A fork of Discord\'s SimpleAST fully in Java without Android code'
                    url = 'https://github.com/Vankka/SimpleAST'

                    scm {
                        connection = 'scm:git:https://github.com/Vankka/SimpleAST.git'
                        developerConnection = 'scm:git:https://github.com/Vankka/SimpleAST.git'
                        url = 'https://github.com/Vankka/SimpleAST'
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'Vankka'
                        }
                    }
                }
            }
        }

        signing {
            sign publishing.publications.maven

            def key = System.getenv('SONATYPE_KEY')
            if (key != null) {
                useInMemoryPgpKeys(key, System.getenv('SONATYPE_KEY_PASS'))
            }
        }

        repositories {
            maven {
                credentials {
                    username findProperty('ossrhUsername')
                    password findProperty('ossrhPassword')
                }
                url version.endsWith('-SNAPSHOT') ? 'https://s01.oss.sonatype.org/content/repositories/snapshots/' : 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            }
        }
    }

    finalizedBy publish
}
